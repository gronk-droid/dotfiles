#!/usr/bin/env zsh

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #


lctrl + lalt - d : yabai -m window --grid 1:3:0:0:1:1

lctrl + lalt - f : yabai -m window --grid 1:3:1:0:1:1

lctrl + lalt - g : yabai -m window --grid 1:3:2:0:1:1

# toggle stackline logos
lctrl + lalt - tab :  /usr/local/bin/hs -c 'stackline.config:toggle("appearance.showIcons")'


# go to previous stacked set or last one if at the top
lctrl + lalt - up: yabai -m window --focus stack.prev || yabai -m window --focus stack.last

# go to next stacked window or first one if at the bottom
lctrl + lalt - down: yabai -m window --focus stack.next || yabai -m window --focus stack.first

# numbers are: 0x12, 0x13, 0x14, 0x15 → 1, 2, 3, 4

# space 1
lctrl + lalt - 0x12: yabai -m space --focus 1

# space 2
lctrl + lalt - 0x13: yabai -m space --focus 2

# space 3
lctrl + lalt - 0x14: yabai -m space --focus 3

# space 4
lctrl + lalt - 0x15: yabai -m space --focus 4


# 0x3B → lctrl
# 0x3A → lalt


# go to space to the left and if not go to the last one (revolving)
lctrl + lalt - left: yabai -m space --focus prev || yabai -m space --focus last

# similar, except for the right side revolving
lctrl + lalt - right: yabai -m space --focus next || yabai -m space --focus first
